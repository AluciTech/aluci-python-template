#!/usr/bin/env bash
################################################################################
# Python Project Bootstrap Script
#
# Author: Aluci
#
# Description:
#   Bootstraps a Python project directory by:
#     - Installing Miniconda (unless --venv is used)
#     - Creating & activating a Python 3.10+ Conda or venv environment
#     - Installing Poetry
#     - Installing project dependencies
#     - Installing git pre-commit hooks
#
# Usage:
#   ./python_project_setup.sh [OPTIONS]
#
# Options:
#   -h, --help                Show help and exit
#   -d, --debug               Enable verbose mode (set -x)
#   --env-name NAME           Name of the environment (default: pyenv)
#   --python-version VER      Python version to use (default: 3.10)
#   --venv                    Use python -m venv instead of Conda
################################################################################

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
RESET='\033[0m'

# Help message
dhelp() {
    cat <<EOF
Usage: $0 [OPTIONS]

Bootstraps a Python project environment using Miniconda or venv.

Options:
  -h, --help                Show help and exit
  -d, --debug               Verbose mode (set -x)
  --env-name NAME           Name of the environment (default: pyenv)
  --python-version VER      Python version (default: 3.10)
  --venv                    Use python -m venv instead of Conda
EOF
}

# Refuse to run as root
check_not_root() {
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}Do NOT run this script as root. Use an unprivileged account.${RESET}"
        exit 2
    fi
}

# Option parsing
OPTS=$(getopt -o hd --long help,debug,env-name:,python-version:,venv -n 'python_project_setup.sh' -- "$@") || {
    dhelp
    exit 0
}
eval set -- "$OPTS"

DEBUG=false
ENV_NAME="pyenv"
PY_VER="3.10"
ENV_MANAGER="conda"

while true; do
    case "$1" in
    -h | --help)
        dhelp
        exit 0
        ;;
    -d | --debug)
        DEBUG=true
        shift
        ;;
    --env-name)
        ENV_NAME="$2"
        shift 2
        ;;
    --python-version)
        PY_VER="$2"
        shift 2
        ;;
    --venv)
        ENV_MANAGER="venv"
        shift
        ;;
    --)
        shift
        break
        ;;
    esac
done

[ "$DEBUG" = true ] && set -x

quiet_run() {
    if [ "$DEBUG" = true ]; then "$@"; else "$@" >/dev/null 2>&1; fi
}

# Install Miniconda if needed
install_miniconda() {
    if quiet_run command -v conda; then
        echo -e "${GREEN}Miniconda already installed. Skipping${RESET}"
        return
    fi

    echo "Installing Miniconda..."
    mkdir -p "$HOME/miniconda3"
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
        -O "$HOME/miniconda3/miniconda.sh"
    bash "$HOME/miniconda3/miniconda.sh" -b -u -p "$HOME/miniconda3"
    rm -f "$HOME/miniconda3/miniconda.sh"

    # Make Conda usable immediately and later
    export PATH="$HOME/miniconda3/bin:$PATH"
    eval "$("$HOME/miniconda3/bin/conda" shell.bash hook)"
    quiet_run conda init bash
}

# Create Conda environment
create_conda_env() {
    local env="$1"
    local py_ver="$2"

    if conda env list | awk '{print $1}' | grep -qx "$env"; then
        echo -e "${GREEN}Conda env '$env' already exists. Skipping creation${RESET}"
    else
        echo "Creating Conda env '$env' with Python $py_ver..."
        quiet_run conda create -y -n "$env" "python=$py_ver"
    fi

    eval "$(conda shell.bash hook)"
    conda activate "$env"
}

# Create venv environment
create_venv() {
    local env_dir="$1"
    local py_ver="$2"

    local py_bin="python$py_ver"
    if ! command -v "$py_bin" >/dev/null 2>&1; then
        py_bin="python3"
    fi

    if [ -d "$env_dir" ]; then
        echo -e "${GREEN}venv '$env_dir' already exists. Skipping creation${RESET}"
    else
        echo "Creating venv '$env_dir' with $py_bin..."
        quiet_run "$py_bin" -m venv "$env_dir"
    fi

    source "$env_dir/bin/activate"
}

# Install Poetry
install_poetry() {
    if quiet_run command -v poetry; then
        echo -e "${GREEN}Poetry already installed. Skipping${RESET}"
    else
        echo "Installing Poetry..."
        quiet_run pip install poetry
    fi
}

# Install project dependencies
run_poetry_install() {
    if [ -f "pyproject.toml" ]; then
        echo "Installing project dependencies via Poetry..."
        quiet_run poetry install --no-cache --no-interaction
    else
        echo "No pyproject.toml found. Running 'poetry init'..."
        if quiet_run poetry init --name "$(basename "$(pwd)")" \
            --description "Auto-generated by setup script" \
            --python "^$PY_VER" -n; then
            echo "Created pyproject.toml. Installing dependencies..."
            quiet_run poetry install --no-cache
        else
            echo -e "${RED}Error: 'poetry init' failed in $(pwd).${RESET}"
            exit 4
        fi
    fi
}

# Setup pre-commit hooks
setup_pre_commit() {
    if quiet_run command -v pre-commit; then
        echo "Installing pre-commit hooks..."
        quiet_run pre-commit install || true
    else
        echo -e "${RED}pre-commit not available. Is it listed in pyproject.toml?${RESET}"
    fi
}

# Main
check_not_root

if [ "$ENV_MANAGER" = "venv" ]; then
    create_venv "$ENV_NAME" "$PY_VER"
else
    install_miniconda
    create_conda_env "$ENV_NAME" "$PY_VER"
fi

install_poetry
run_poetry_install
setup_pre_commit

echo -e "${GREEN}Project successfully initialised!${RESET}"
echo
echo "# ----------------------------------------------------------------------"
echo "# First time installing miniconda?"
echo "#   source ~/.bashrc"
echo "# Need a new dependency?"
echo "#   poetry add <package>"
echo "# ----------------------------------------------------------------------"

exit 0
